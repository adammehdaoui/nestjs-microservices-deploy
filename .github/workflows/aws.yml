name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_API_GATEWAY: "api-gateway"
  ECR_REPOSITORY_HELLO_WORLD: "hello-world-microservice"
  ECR_REGISTRY_ALIAS: "l0w9m4t8"
  ECS_SERVICE: "app"
  ECS_CLUSTER: "nestjs-microservices"
  ECS_TASK_DEFINITION: .github/.aws/task-definition.json

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push hello-world microservice image to Amazon ECR
        id: build-hello-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_HELLO_WORLD }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_HELLO_WORLD:latest ./apps/hello-world-microservice
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_HELLO_WORLD:latest
          echo "image=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_HELLO_WORLD:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push api-gateway microservice image to Amazon ECR
        id: build-api-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_API_GATEWAY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat "MICROSERVICE_HOST=$MICROSERVICE_HOST" > ./api-gateway/.env 

          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_API_GATEWAY:latest ./api-gateway
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_API_GATEWAY:latest
          echo "image=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_API_GATEWAY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image IDs in the Amazon ECS task definition for hello-world microservice
        id: task-def-hello
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: hello-world-microservice
          image: $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_HELLO_WORLD:latest

      - name: Fill in the new image IDs in the Amazon ECS task definition for api-gateway microservice
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: api-gateway
          image: $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY_API_GATEWAY:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
